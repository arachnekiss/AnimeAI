// API 테스트 실행 스크립트
// 브라우저 개발자 도구에서 실행할 수 있는 테스트 스크립트

console.log('🚀 Starting AI Engine API Tests...');

// 테스트 1: API 연결 기본 확인
async function testBasicConnection() {
  console.log('📡 Testing basic connection...');
  
  try {
    // 기본 fetch 테스트
    const response = await fetch('https://api.openai.com/v1/models', {
      method: 'HEAD', // OPTIONS 대신 HEAD 사용
    });
    
    console.log('✅ OpenAI API endpoint is accessible');
    return true;
  } catch (error) {
    console.log('❌ OpenAI API endpoint not accessible:', error.message);
    return false;
  }
}

// 테스트 2: 캐릭터 생성 fallback 테스트
async function testCharacterGenerationFallback() {
  console.log('🎭 Testing character generation fallback...');
  
  try {
    // 시뮬레이션된 지연시간
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    const character = {
      id: 'test-' + Date.now(),
      name: 'Test Character',
      style: 'anime',
      hairColor: 'blue',
      eyeColor: 'green',
      personality: ['friendly', 'energetic'],
      backstory: 'A test character generated by fallback method'
    };
    
    console.log('✅ Character generation fallback working:', character);
    return true;
  } catch (error) {
    console.log('❌ Character generation fallback failed:', error.message);
    return false;
  }
}

// 테스트 3: 애니메이션 엔진 연결 확인
async function testAnimationEngine() {
  console.log('🎬 Testing animation engine connection...');
  
  try {
    // Canvas 요소 확인
    const canvas = document.querySelector('canvas');
    if (!canvas) {
      throw new Error('Canvas element not found');
    }
    
    // 기본 렌더링 테스트
    const ctx = canvas.getContext('2d');
    if (!ctx) {
      throw new Error('Canvas context not available');
    }
    
    // 테스트 그래픽 그리기
    ctx.fillStyle = '#4CAF50';
    ctx.fillRect(10, 10, 50, 30);
    ctx.fillStyle = '#fff';
    ctx.font = '12px Arial';
    ctx.fillText('TEST', 15, 30);
    
    console.log('✅ Animation engine basic rendering working');
    return true;
  } catch (error) {
    console.log('❌ Animation engine test failed:', error.message);
    return false;
  }
}

// 테스트 4: UI 인터랙션 확인
async function testUIInteractions() {
  console.log('🖱️ Testing UI interactions...');
  
  try {
    // 주요 버튼 요소들 확인
    const buttons = document.querySelectorAll('button');
    if (buttons.length === 0) {
      throw new Error('No interactive buttons found');
    }
    
    // API 테스트 버튼 찾기
    const apiTestButton = Array.from(buttons).find(btn => 
      btn.textContent.includes('Test AI Engine')
    );
    
    if (apiTestButton) {
      console.log('✅ API Test button found and accessible');
    } else {
      console.log('⚠️ API Test button not found');
    }
    
    // 캐릭터 생성 버튼 찾기
    const characterGenButton = Array.from(buttons).find(btn => 
      btn.textContent.includes('Generate New Character')
    );
    
    if (characterGenButton) {
      console.log('✅ Character generation button found');
    } else {
      console.log('⚠️ Character generation button not found');
    }
    
    console.log(`✅ Found ${buttons.length} interactive elements`);
    return true;
  } catch (error) {
    console.log('❌ UI interaction test failed:', error.message);
    return false;
  }
}

// 테스트 5: 로컬 스토리지 설정 확인
async function testLocalStorage() {
  console.log('💾 Testing local storage functionality...');
  
  try {
    // 테스트 데이터 저장/읽기
    const testKey = 'ai-engine-test';
    const testValue = JSON.stringify({
      timestamp: Date.now(),
      test: 'success'
    });
    
    localStorage.setItem(testKey, testValue);
    const retrieved = localStorage.getItem(testKey);
    
    if (retrieved === testValue) {
      console.log('✅ Local storage working properly');
      localStorage.removeItem(testKey); // 정리
      return true;
    } else {
      throw new Error('Local storage data mismatch');
    }
  } catch (error) {
    console.log('❌ Local storage test failed:', error.message);
    return false;
  }
}

// 전체 테스트 실행
async function runAllTests() {
  console.log('🔬 Running comprehensive AI Engine tests...');
  console.log('================================================');
  
  const results = {};
  
  results.basicConnection = await testBasicConnection();
  results.characterGeneration = await testCharacterGenerationFallback();
  results.animationEngine = await testAnimationEngine();
  results.uiInteractions = await testUIInteractions();
  results.localStorage = await testLocalStorage();
  
  console.log('================================================');
  console.log('📊 Test Results Summary:');
  
  const total = Object.keys(results).length;
  const passed = Object.values(results).filter(Boolean).length;
  const failed = total - passed;
  
  console.log(`Total Tests: ${total}`);
  console.log(`Passed: ${passed} ✅`);
  console.log(`Failed: ${failed} ❌`);
  console.log(`Success Rate: ${((passed / total) * 100).toFixed(1)}%`);
  
  Object.entries(results).forEach(([test, result]) => {
    const status = result ? '✅' : '❌';
    console.log(`${status} ${test}`);
  });
  
  if (passed === total) {
    console.log('🎉 All tests passed! AI Engine is ready for real API testing.');
  } else if (passed >= total * 0.8) {
    console.log('⚠️ Most tests passed. Some features may need attention.');
  } else {
    console.log('🚨 Multiple test failures. Please check the setup.');
  }
  
  return results;
}

// 실제 API 키 테스트 (선택사항)
async function testWithRealAPI(apiKey) {
  if (!apiKey) {
    console.log('🔑 No API key provided. Skipping real API tests.');
    return false;
  }
  
  console.log('🔐 Testing with real OpenAI API...');
  
  try {
    const response = await fetch('https://api.openai.com/v1/models', {
      headers: {
        'Authorization': `Bearer ${apiKey}`,
      }
    });
    
    if (response.ok) {
      const data = await response.json();
      console.log(`✅ Real API test successful. ${data.data.length} models available.`);
      return true;
    } else {
      console.log(`❌ Real API test failed: ${response.status} ${response.statusText}`);
      return false;
    }
  } catch (error) {
    console.log('❌ Real API test error:', error.message);
    return false;
  }
}

// 사용 방법 안내
console.log(`
🔬 AI Engine API Test Console
=============================

기본 테스트 실행:
> runAllTests()

실제 API 키로 테스트:
> testWithRealAPI('your-api-key-here')

개별 테스트 실행:
> testBasicConnection()
> testCharacterGenerationFallback()
> testAnimationEngine()
> testUIInteractions()
> testLocalStorage()

---
시작하려면 runAllTests()를 실행하세요.
`);

// 전역 함수로 등록
window.runAllTests = runAllTests;
window.testWithRealAPI = testWithRealAPI;
window.testBasicConnection = testBasicConnection;
window.testCharacterGenerationFallback = testCharacterGenerationFallback;
window.testAnimationEngine = testAnimationEngine;
window.testUIInteractions = testUIInteractions;
window.testLocalStorage = testLocalStorage;
